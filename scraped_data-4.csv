Author,Author Description,Publication Date,Votes,Review
Assistant,Bot,2024-08,0,"Agile software development offers many advantages, but it also comes with several disadvantages:
Scope Creep: Agile's flexibility can lead to continuous changes in project scope, making it difficult to manage and potentially resulting in project delays.
Less Predictability: Due to its iterative nature, it can be hard to estimate timelines and budgets accurately, which can create challenges for stakeholders expecting fixed deliverables.
Requires Experienced Team Members: Agile relies heavily on collaboration and communication, requiring team members to be self-motivated and experienced. Less experienced teams may struggle with the methodology.
Potential for Fragmentation: In some cases, frequent iterations can lead to a lack of cohesion in the overall product architecture, if not managed properly.
Documentation Challenges: Agile often emphasizes working software over comprehensive documentation, which can lead to insufficient documentation for future reference or onboarding new team members.
Client Involvement: Agile requires continuous client or stakeholder involvement, which may not always be feasible. Some clients may not have the time or expertise to participate actively.
Resistance to Change: Teams accustomed to traditional methodologies may resist adopting Agile practices, leading to conflicts and a slower transition.
Overemphasis on Collaboration: While collaboration is beneficial, it can also lead to decision-making paralysis if too many stakeholders are involved in discussions.
Scaling Issues: Agile can be challenging to scale for larger projects or organizations, leading to the development of hybrid models that may dilute the principles of Agile.
Limited Focus on Non-Functional Requirements: Agile methodologies often prioritize functional requirements, which may lead to insufficient attention to non-functional aspects like performance, security, and scalability.
Addressing these disadvantages often requires careful planning, team training, and a clear understanding of Agile principles to ensure successful implementation."
Charan Puneet Singh,Analyst,2015,16,"To know the disadvantages of Agile, it is important to know what Agile software development means. Please refer the Agile Manifesto.
Irrespective of the flavor of agile you decide to chose, there are some industry accepted scenarios where Agile will work and where it will not work.
Agile will not work well unless every member of your team is really good.
Agile will not work well for a team where communication is an issue. It needs open communication for every day stand ups and retros. Your communication should be so good that any developer in your team should be able to pick up any piece of code and start working on it.
Agile will not work in a hierarchy-driven organizational set up. It needs a culture which cannot be developed overnight.
Agile will not work in a scenario where failure is not an option. It is often called FDD for this reason.
Agile may not work very well for a package implementation or a system integration project.
Agile will fail without the right engineering practices in place. Pair Programming, Test Driven Development, Continuous Integration are necessary for agile to work.
Agile is not the goto term for ignoring solution design and code"
Todd Main,30 years of software engineering,2022,4,"The following are my opinions, not statements of fact. Scrum is an extremely popular and successful process. It solves many problems that existed before Agile methodologies came along, and is a great way to introduce teams and companies to Agile, since it is supported by structured training and roles.
On the other hand, it’s not my favorite choice for Lean/Agile processes. You don’t need to add comments to tell me I’m wrong, although you’re welcome to preach to me if you feel that I’m unfairly characterizing some aspects of Scrum. Also note that I am a huge fan of the Agile Manifesto and corresponding principles.
And so, in no particular order, I believe that some of the disadvantages of Scrum are:
The artificial deadline of the “sprint”. The objective is to impart an artificial, imposed deadline on the team, over and over and over. It’s a stick that you force the team to beat themselves with.
One of the traditional complaints of leaders outside of the software team is that they feel that the team lacks a sense of urgency. This sprint is intended to impose this on the team. Rather than inspiring the team, it is an authoritarian whip that is extremely cleverly packaged as empowerment.
Story Point sizing. This complaint is about theory vs. practice. All of the theory around relative sizing sounds so appealing. It just makes so much sense, and again, it’s supposed to empower the team by freeing them from “person hour” estimates. But in practice, I can’t begin to tell you how many times I’ve listened to a Scrum Mater tell a team that they’re getting it wrong - again - and that they need another workshop and another round of “representative stories”. The reality is the humans are completely terrible at sizing things. IMO, a far better approach is the following:
Ask the team if the story is small enough to be delivered in 2 or 3 days
Doesn’t matter if it’s smaller than that
If it is, you’re done
If it isn’t, split the story and repeat. Story splitting can also be a big challenge. My advice to teams that struggle with this is to practice ATDD. You agree on the acceptance tests (not “acceptance criteria”) before sizing. Then, if you need to split the story, use the tests as the “seams” in the story.
Booting the manager out of the team and replacing them with someone (the PO) without a software engineering or management background. This is not the intent of Scrum, but it can easily become the consequence of Scrum, particularly if you the team is trained by someone who also lacks actual software development experience.
The Product Owner’s role is to prioritize the team’s backlog
The team is told to not do any work that isn’t a prioritized story
The manager is sometimes taken aside at some point during the training and told that there is no place for “traditional management” in Scrum and it is important for them to not by an obstacle. I witnessed one company ban managers from Scrum ceremonies.
So how does technical debt get prioritized?
In my experience, the best strategy is to preserve a percentage of the team’s capacity for technical debt and allow them to write and prioritize those stories (subject to team discussion about impact to upcoming releases). However, some organizations insist on a “pure” model (an oxymoron in Agile) and expect the PO to prioritize these stories against their own stories, and make lofty “armchair quarterback” statements like “well, the team should be able to communicate the value of those stories well enough that their priority is obvious”. I’ve heard - on multiple teams at multiple companies - a PO actually say “we don’t have time for test automation”.
Putting the PMO in charge of the software development process. I know, Scrum doesn’t mention anything about the PMO, but in many organizations, the Scrum Master role is filled by a Project Manager who is part of that organization. Here’s an experiment: as a software engineer, attend an Agile conference and count how many software engineers you encounter there. (Hint, you probably only need one or two hands.) And I know, the SM is not supposed to be “in charge” of the process, but that is often the consequence. Three day workshop, pass a test, and BAM, you’re a certified expert who can tell the team why they shouldn’t do something.
Side note: I have a lot of respect for Project Managers who have successfully made the transition to an Agile mindset, and also those who still perform the traditional Project Manager role (as long as it is an active role and not just status reporting). There are a lot of benefits of Agile Project Management. My complaint is when their responsibilities stray into advising Software Engineers on their processes. It is sometimes difficult to get Software Engineers to learn processes enough to evangelize them, but in my experience, it usually works best when the team’s process “sage” has a software development background. I remember overhearing a Scrum Master lecturing a development team on emergent design - it wasn’t pretty.
The end result of the Scrum Master role is to protect the status quo. And again, this was not the intention, but it is often the outcome. The extreme examples are the certified Scrum preachers who have found their religion and are protecting their flock from sin. Even the least extreme examples are the fundamental flaw of having someone who’s job is to help the team with their process while having no actual software development experience.
And a corollary to 4 and 5 are that the Scrum process is fundamentally a project management process, not a software development process. Yet the team usually doesn’t realize this, and so they cede responsibility for decisions to the PO and SM and take no ownership of the way that they operate.
Famously, the lack of any attempt to interface with the rest of the company. This has led to things like SAFe (which I loathe) or often just a lofty attitude that the company needs to “be more Agile”. There is a general lack of training (aside from things like SAFe) in this area, and little guidance on how to accomplish roadmap planning in the Scrum world.
Ironically, another famous Agile process, Extreme Programming (XP) is almost the opposite of Scrum. Again, its intentions are righteous, but the outcome can be a process where the business priorities take a back seat to a (self imposed) authoritarian technical standard of practices that a true believer will defend but that many teams struggle to implement. That doesn’t mean there isn’t value in these practices, but things like TDD are not for the faint of heart and require a lot of repeat guidance and potentially workshops.
My favorite type of process is still a Kanban system. Yes, as with the others, there are imposed rules, and yes, the team members struggle with the rules, but the rules aren’t about who does what job, and they’re actually pretty simple:
if you want the process to work, keep the stories small
enforce WIP limits
as a general guide, start with severe limits and back off only as needed
when you reach a WIP limit, go to the right to find the bottleneck and help out there
The rest aren’t rules, they’re just guidelines:
if you can’t help out with a bottleneck, embrace “slack time” and do some training, automate tests, or research the source of a data issue in production that the team has been seeing lately. Just don’t cheat and do “story work”.
celebrate the WIP limits. They help you see the bottlenecks in your process. Maybe you need a specialist. Maybe you need to reduce the reliance on specialists. Maybe you need more automation. Maybe you have created an artificial bottleneck and you need to evaluate its value. Maybe you need to completely rethink the way that you deliver stories to smooth out the wrinkles. And on and on. The WIP limits are you friend, and every time you hit the limit, your friend is desperately trying to tell you something (and that something is seldom “increase the limit”)
use some process control metrics to help yourselves improve. Lead time and cycle time are the obvious ones to start with, plus the usual like defect rates.
Like any process, the success of a Kanban System depends heavily on having adequately trained leaders. And in my opinion, those leaders should be grown among the software development team, rather than coming from other teams like Product Management or the PMO. This is (IMO) one of the great missed opportunities in companies that train software development managers."
Ashwin Dhakal,Web Designer and Administrator at Tech Unboxin (2015–present),2018,25,"I have answered about the Agile Development after many answer request in this Quora section : Ashwin Dhakal's answer to What is agile development? [ https://www.quora.com/What-is-agile-development/answer/Ashwin-Dhakal ]
This is the graphical representation of the Agile Model I draw for your convenience. Hope you like it :)

Disadvantages of Agile model:
1) This model is very annoying in case of some of the large software, since it is difficult to assess the effort required at the very beginning of the software development life cycle.
2) There is serious absence of emphasis on necessary designing and documentation of the ...
Access this answer and support the author as a Quora+ subscriber
Access all answers reserved by
Ashwin Dhakal
for Quora+ subscribers
Access exclusive answers from thousands more participating creators in Quora+
Browse ad‑free and support creators
Start free trial
Learn more"
Sachin More,Principle Consultant at Atos (2010–present),2019,5,"Agile > No Agile > Bad Agile
Bad Agile is a horrific experience that I wouldn't wish on my worst enemies.
My worst experience so far:
· Sprint planning - This is where the product owners actually figured out what work they wanted to do. We'd spend several hours discussing nebulous requirements before even getting to prioritization
· Daily meeting - The 30+ minute sit down where everything is re-prioritized, new tasks are added, whole conversations are repeated. The product owners would not listen to the scrum master and stay on track
· Sprint retrospective - These were cancelled because the product owners didn't want to change how they worked and were considered pointless
You can only push back so much before something breaks. In reality, everyone gives up on improving the process to maintain some shred of sanity. Anyone new to Agile joining thinks this is how it's done and henceforth hates it.
I think one problem stems from Agile consultants telling the organization that they should ""Do what fits best"". While technically true, people don't understand the motivations of Agile and therefore interpret it as ""Make up my own process with my 0 years of research/experience""
The “fast” that Agile promises isn’t “fast to finish” but rather “fast to react”.
It promises to minimize the time from receiving information to shipping code to respond to that information.
If you already know all the requirements and design constraints up front, then new information has no value, and Agile won’t save you any time over any other development methodology.
While pressure can make developer productive in the short term, the kind of stress created by those short iteration doesn't. The main issue with it is that it's artificial pressure for most of the time. It's a artificial deadline and the only way to enforce it is with social pressure, which create the worse kind of stress."
Saravana Bharathi,Works at Northwestern Mutual,2014,3,"Agile implementations, be it Scrum, XP, Kanban or mix of these requires a huge shift in culture and thought process. It is not about process, not about standing up everyday and answering three questions.
That being said, most of the time the frustration comes out because of bad implementation, not enough support from your senior management, no training etc. people get stuck with the process instead of understanding value and principles behind it.
Let me give you an real life example. In the past I consulted with a company, I went there middle of crisis. The VPs and big wigs thought scrum is the silver bullet, they said go scrum. The software teams bought into it. But not support teams like contracts. It was a hell. Contracts still wanted suppliers to write down detailed specs, penalties associated with timeline, lengthy MS project, change control process etc. people kept two books. It was a huge strain on supplier. In the end, it was a failure, left with frustrated people. People blamed it on Scrum and the software group head was let go. I could write an entire book about insights from this experience.
If you read the above and give it a thought, most of the times the issues are because of bad implementation and misinterpretation. Sometimes your organization may not be ready for it. Better don't do it. Save the frustration. If you still want to do it, hire an experienced consultant, some one who had done it many times. Interview them personally, do a little bit of research about this guy before bringing him in. stay away from middle tier recruiting / head hunters. 99% of the time they don't know what they are looking for."
Wilson Leung,Software Engineer (2008–present),2018,5,"In my experience, the ‘agile’ part gets too much emphasis.
People do the work, and it’s the people that get the job done.
IMO agile really means is to let the ‘team’ decide what’s best for the customer & product an empower them to do it. Agility is a symptom of this empowerment and it leads to efficiency. But unfortunately the ‘symptom’ is what is being ‘taught’ as the cause of successful projects.
People are left neglected and worse: “Boss, I don’t feel I need to write everything in a sprint, John and I are working quite well together and quite efficiently and we BOTH agree it is of no value” Reply: “Sorry, you need to put it in a sprint plan, and your tasks need to be broken down and reviewed by the rest of the team who are ‘agile’ experts from other companies (not involved in the project), otherwise you are at risk of not understanding a task and you will fail”
My boss just said he didn’t trust my expertise and personal experience with the project, he trusted ‘agility’ more… ironic."
Victor Malyavko,QA evangelist | Cherish DEV Founder,2022,4,"Agile is an effective system, which can improve your processes. However, you’d better be aware that there are some limitations:
Fear of uncertainty that creates stress for the team — the lack of sequential stages and the clear project development plan, the possibility of changes in the last stages of QA testing may become a stress factor.
Degradation of quality — with the inept use of the methodology, due to fastened releases and, accordingly, a larger number of QA tests, the quality may become lower.
Long time to implement — Agile is a complex methodology that can be a problem for QA testers who are used to Waterfall. You will have to develop communication skills, learn to be more responsible and multitask.
Stress for customers — not all clients know exactly what they want. Not all clients have time for daily meetings and problem-solving that they hoped to delegate to others.
Strong motivation of employees and professionalism at the same level are required — QA Engineers must keep up with each other in a rapidly changing, flexible software testing process, and this is difficult to achieve with insufficient motivation and qualifications of at least one of the team.
Read my article for more information about Agile
Agile: Tribute to Fashion or Effective QA Management?
The Agile Methodology is a software development methodology that is implemented to increase software development speed and agility. Touted to be good for the software industry, it is not a novel idea.
https://www.linkedin.com/pulse/agile-tribute-fashion-effective-qa-management-victor-malyavko/"
Nikita Gureev,"B.S. in Software Engineering, Higher School of Economics (Graduated 2016)",2017,5,"Agile development is frequently praised for its flexibility, quick feedback, efficient communication, and frequent releases, however it is not the best methodology for every case. There exist several disadvantages to this model:
Agile is as flexible and accomodating for new requirements, as it is difficult to predict and estimate at the start. Some projects adopting this methodology turn out to be too long-lasting. A reason for that may be lack of project focus and clear vision of the product from the customer;
While frequent communication and involvement from customer can have a huge positive impact on the develoment, there is a potential problem here, as some customers won’t be able to participate so actively in the development;
Agile prioritizes working code over documentation, and while that may be a positive thing, some projects just end up lacking proper documentation. Combine that with high developer turnover rate and you have a recipe for disaster;
Agile practices allow for involvement of different roles early on in the project, which is generally a good thing. However, it increases costs for the project from early on, which people should be mindful of. It is important to mention that this practice mitigates some risks. For instance, continious integration throughout the project may be costly, but it is preferable to high risks of waterfall testing process.
Overall, Agile has many advantages and should be used for a wide range of projects of different scale, however one should be aware of the possible drawbacks this methodology has.
Links:
Disadvantages of Agile Development
Agile software development - Wikipedia
The Massive Downside of Agile Software Development"
Anusha Hewage,"Agile Thought Leader, Program and project manager",2017,2,"I ll try to answer this question targeting software development as the question is formed that way .
Actually it is true that only success is most of the time documented and available to refer . Drawbacks are rarely mentioned .
Issues I have experienced are below.
Developers feel they are micromanaged
Resistance basically starts from the stand ups . Everyday coming for this 15 minutes and giving updates are not a comfort for everybody . Hence they start criticizing and resisting the process which can finally lead to say this process is not good for us. (This is when the scrum master has to show his/her leadership and coaching skills and let the people know the benefits of this 15 minutes )
Leadership team will not get the idea of not having a gantt chart with resource allocations , for a specif period and finally can lead to misjudgment of the progress of the project (Again it is Agile coach’s job to make that right )
If distributed agile is not properly facilitated with logistics, Audio Visual meeting facilities , distributed agile teams can get worst as they will really feel frustrated following the cadence in different locations . (Agile coach and leadership teams should implement proper distrusted agile and should be facilitated with technology and equipment )
If not properly implement dev projects in agile can really increase technical debt .
If the planning is done once in every two weeks (iteration ) then the systems team can really suffer to accommodate the changes. So it can really become messy as they will try to implement to support the two weeks objectives (That is why agile implementation needs to be an enterprise agile exercise from top to bottom. All processes need to be agile. Also continuous integration should be supported , facilitated with the necessary skills, tools"
Jeff Nelson,Invented Chromebook,2015,110,"My main criticism of Agile is that it's become such an all-inclusive term for so many different methodologies.
Scrum is Agile.
Test-driven development is Agile.
Pair programming is Agile.
Open-ended specification is Agile.
It's not a stretch to say even management-by-walking-around and Six Sigma have been relabeled as part of Agile.
Back in the 1990s, we had many terms for many methodologies, software and management. Now, every methodology is just called ""Agile""."
Sagar Rao,Studied Master of Science in Computer Science & Software Engineering (Graduated 2011),2022,0,"Photo by Sebastian Herrmann on Unsplash
Scrum is a modern software development framework. It is an agile methodology that promotes collaboration and transparency by using a cross-functional team approach. As a result, many companies have adopted it, and it has become the de facto standard in the industry.
Time-Conscious
The biggest drawback of the scrum process is that it is highly time-conscious. This means that, on top of the numerous other things that the team has to do, it has to keep track of what is due when, and it has to do this in a timely manner. Furthermore, during the sprint planning stage, the team has to work out how they will integrate all the tasks that they have lined up for themselves, and it also has to do this in a way that keeps the customers happy and the project on track.
Due to all of this, it is clear to see why some companies have resorted to using assistants to help with the planning and the execution of the project. Furthermore, since the task allocation is flexible, you can rest assured that the team will respect your time constraints, and they will ensure that all tasks are completed on time.
Not Suitable For Large Teams
The scrum process is not suitable for large teams. This is mainly because it was designed for smaller teams that are more agile. As a result, when large teams are brought in, they often try to operate in a more structured manner, which can either slow the process down or even put a stop to it altogether. Additionally, having too many cooks in the kitchen means that the food is often overcooked, and quality suffers.
If you are working in a team of more than 10 people, then it is recommended to split the team into smaller sub-teams. This is because, in practice, teams of 5-10 people are more effective and efficient, and it also helps improve quality. If you really want to take it to the next level, then you can even form mini-teams within the team, to tackle specific parts of the project, such as the client-side functionality, the server-side functionality, and so on.
Poor Hand-Off From Design To Development
One of the biggest drawbacks of the scrum process is that it is a very “siloed” process. This means that it is highly isolated, and there is very little cross-communication between the participants. In practice, this often leads to a poor hand-off from design to development. Especially when a team is new to the process, it is very difficult to know where to begin, and it can result in a lot of wasted time.
As a result of this, it is advisable to establish a good process for integrating design and development work, so that both parties know what is expected of them. In this way, everyone involved in the project will be able to act with more purpose and effectiveness. Furthermore, by having a better understanding of what is entailed in the project, both parties can take the necessary time to get everything right.
Limited Scope
One of the biggest drawbacks of the scrum process is that it has very limited scope. Especially when compared to other agile methodologies, like Kanban, the process is fairly linear and does not allow for a lot of “side-tracking”. For example, if you are only working on the user interface and the organization structure of the project, then you will have to either use a pre-existing database scheme or figure out how to structure the files yourself.
Additionally, since it is a fairly straightforward process, there is a limit to how much the team can actually achieve. Especially when working on larger projects, the team may run out of steam, and it can result in a poor quality product being delivered to the customer. Remember, a scrum project is only as good as the team's commitment to it, and if there are any slip-ups, then the customer may end up with a buggy product that is poorly engineered.
Conclusion
In conclusion, not all software development companies will benefit from this methodology. This is because, in some instances, scrum may not be the best fit for a specific project. As such, before adopting any kind of process, you must consider your needs and the project at hand."
Deepali Nagrani,"Lives in Bengaluru, Karnataka, India (2019–present)",2018,2,"Agile focuses on incremental delivery of client specified features.While slicing off a set of features for earlier release may prove beneficial but a lack of full visibility into overall requirements is often the cause of issue related to system behaviour, performance, capability and other crucial attributes.
Such problems typically require costly rework to retrofit important capabilities that weren't identified until the project was halfway through.
Agile projects poses a substantial risk that the team will move too quickly into iterative design and implementation,before the crucial features are sufficiently understood to support right architecture decisions.
There are problems that emerge due to poor architecture design that cannot be easily undone by refactoring.
If crucial aspects aren't acknowledged early on ,the chances are one or more important quality attribute will be ignored that isn't immediately visible and become incompatible with the initial architecture commitments.
This issue happens largely as a result of phenomenon of bounded rationality (A few supporting features that didn't make a cut turn out to be be essential to make the release truly useful).
To address this inherent challenge,all the additional capabilities must be included to complement most valuable feature."
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
N/A,N/A,N/A,0,N/A
